############################################################
### THIS IS A CUT DOWN VERSION OF FUR-FX FOR VAL-FX ONLY ###
############################################################

# For now this only prints out an array of bytes in the command line, you can plop that into the source code byt just adding a DB at the start.

"""
FUR-FX - A furnace to SFX converter by Coffee 'Valen' Bat

THIS WILL ONLY WORK WITH CLIPBOARD DATA STRAIGHT
FROM THE TEMPLATE FILE INCLUDED, that means only CH2 and CH4, 
only the MAIN instrument and 3 effect columns. changing any of 
this WILL throw the converter off.

The supported note range is C-2 through B-7 for channel 2 and C-3 through G#5.

SUPPORTED EFFECTS
=================
FFxx - stop/end sound effect
08xx - change channel panning (F0 = left, 0F = right)
12xx - change CH2 duty
11xx - change CH4 noise mode (0 = 15 bit, 1 = 7 bit)
09xx - change speed 1
0Fxx - change speed 2

EVERY SOUND EFFECT MUST END WITH AT LEAST ONE INSTANCE OF "FFxx".

.TXT FORMAT SPECS:
==================
Every SFX must start with === Followed by the sfx name,
after that, you can define priority or sgb values with:
- "PRI X"
- "SGB TABLE ID PITCH VOL" (CBT-FX only)
- "REALSPEED" (VGM2GBSFX/.VGM only)

After that, an empty line followed by the furnace clipboard UNEDITED, 
at the end of your text file, there must be a line that just says "KILL"
to let the parser know it's done.
"""

FUR_note_table = [
"C-2","C#2","D-2","D#2","E-2","F-2","F#2","G-2","G#2","A-2","A#2","B-2",
"C-3","C#3","D-3","D#3","E-3","F-3","F#3","G-3","G#3","A-3","A#3","B-3",
"C-4","C#4","D-4","D#4","E-4","F-4","F#4","G-4","G#4","A-4","A#4","B-4",
"C-5","C#5","D-5","D#5","E-5","F-5","F#5","G-5","G#5","A-5","A#5","B-5",
"C-6","C#6","D-6","D#6","E-6","F-6","F#6","G-6","G#6","A-6","A#6","B-6",
"C-7","C#7","D-7","D#7","E-7","F-7","F#7","G-7","G#7","A-7","A#7","B-7",
]

CH2_freqs = [44,156,262,363,457,547,631,710,786,854,923,986,1046,1102,1155,1205,1253,1297,1339,1379,1417,1452,1486,1517,1546,1575,1602,1627,1650,1673,1694,1714,1732,1750,1767,1783,1798,1812,1825,1837,1849,1860,1871,1881,1890,1899,1907,1915,1923,1930,1936,1943,1949,1954,1959,1964,1969,1974,1978,1982,1985,1988,1992,1995,1998,2001,2004,2006,2009,2011,2013,2015]

NOI_lut_long = [0x74,0x67,0x66,0x65,0x64,0x57,0x56,0x55,0x54,0x47,0x46,0x45,0x44,0x37,0x36,0x35,0x34,0x27,0x26,0x25,0x24,0x17,0x16,0x15,0x14,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00]
NOI_lut_short = [0x7c,0x6f,0x6e,0x6d,0x6c,0x5f,0x5e,0x5d,0x5c,0x4f,0x4e,0x4d,0x4c,0x3f,0x3e,0x3d,0x3c,0x2f,0x2e,0x2d,0x2c,0x1f,0x1e,0x1d,0x1c,0x0f,0x0e,0x0d,0x0c,0x0b,0x0a,0x09,0x08] 

import sys
from struct import pack
import argparse
import pyperclip
import textwrap

parser = argparse.ArgumentParser()
parser.add_argument("out", help="Folder where the output files will be saved.")
parser.add_argument("name", help="Name of the files.")
parser.add_argument("--sgb", help="Add Super Game Boy support (CBT-FX only)", nargs=4, metavar=("FX_TAB", "FX_ID", "FX_PITCH", "FX_VOL"))
parser.add_argument("--flist", help="Read data from txt file.", nargs=1, metavar=("FILE_LIST"))
args = parser.parse_args()


def get_val(line,poi,len):
	return fur[line][poi:poi+len]

def clamp(n, smallest, largest):
    return max(smallest, min(n, largest))

def array_to_hex(a):
	b = []
	for i in range(0, len(a)):
		b.append("0x%0.2X" % a[i])

	b = str(b).replace("'","").replace(" ","")[1:-1]
	return '\n'.join(textwrap.wrap(b, 45))

def _header(chu,pr,len):
	if chu[0]:
		chu = "Channel 2 (Duty)"
	if chu[1]:
		chu = "Channel 4 (Noise)"
	if chu[0] and chu[1]:
		chu = "Channel 2 and channel 4 (Duty & Noise)"
	if args.sgb:
		sgbs = "Yes"
	else:
		sgbs = "No"
	b = """/*

""" + args.name + """

Sound Effect File.

Info:
	Length			:	""" + str(len) + """
	Priority		:	""" + str(pr) + """
	Channels used	:	""" + chu + """
	SGB Support		:	""" + sgbs + """"""
	if args.sgb:
		b += """
	SGB SFX Table	:	""" + args.sgb[0] + """
	SGB SFX ID		:	""" + str(args.sgb[1]) + """
	SGB SFX	Pitch	:	""" + str(args.sgb[2]) + """
	SGB SFX Volume	:	""" + str(args.sgb[3]) + """"""
	b += """

This file was generated by FurFX

*/
"""
	return b

fur = pyperclip.paste().split("\n")[2:]
priority = 0
if args.out == ".":
	args.out = ""

def main():
	noise = False # Check if noise is long or short
	CHUsed = [False, False]
	over = False
	CHon = [False, False] # Not usefule for CBT, but useful for VGM and FHX to avoid pointless writes to a dead channel
	CHOver = [False, False]
	speed = [1, 1] # Speed is in pairs in fur/dmf

	# SPEED, PAN, VOL, DUTY, NOTE, PAN, VOL, FREQ
	step_buffer = [1, 0xFF, 0xf, 0, 0, 0xFF, 0xf, 0x00]

	valfx_buf = []
	valfx_buf.append(priority)

	if args.sgb:
		valfx_buf[0] |= 0x40
		valfx_buf.append(65) # Command byte ((SGB_SOUND << 3) | 1)
		if args.sgb[0] == "A":
			valfx_buf.append(int(args.sgb[1])) # Sound Effect A
			valfx_buf.append(0) # Sound Effect B
		elif args.sgb[0] == "B":
			valfx_buf.append(0) # Sound Effect A
			valfx_buf.append(int(args.sgb[1])) # Sound Effect B
		if args.sgb[0] == "A":
			valfx_buf.append(int(args.sgb[2]) | (int(args.sgb[3]) << 2)) # Sound effect attributes (A)
		elif args.sgb[0] == "B":
			valfx_buf.append((int(args.sgb[2]) << 4) | (int(args.sgb[3]) << 6)) # Sound effect attributes (B)
		valfx_buf.append(0) # Music Score Code (Unused)


	for n in range(len(fur)):
		CHOver[0] = False
		CHOver[1] = False
		# Flags set if any new values are set, probably not 
		# useful for CBT-FX but maybe useful for VGM2GBSFX

		"""
		0 - Speed
		1 - CH2 Pan
		2 - CH2 Vol 
		3 - CH2 Duty
		4 - CH2 Note 
		5 - CH4 Pan 
		6 - CH4 Vol 
		7 - CH4 Freq
		"""
		flag_buffer = [False, False, False, False, False, False, False, False]

		# Note CH2
		if get_val(n,0,3) != "...":
			if get_val(n,0,3) == "OFF": # Set volume to 0 to ensure a blank retrigger
				flag_buffer[4] = False
				flag_buffer[2] = True
				step_buffer[2] = 0
				CHon[0] = False
				CHOver[0] = True
			else:
				if n == 0:
					CHUsed[0] = True
					CHon[0] = True
				if step_buffer[0] != FUR_note_table.index(get_val(n,0,3)) or n == 0:
					flag_buffer[4] = True
					step_buffer[4] = FUR_note_table.index(get_val(n,0,3))

		# Vol CH2
		if get_val(n,6,1) != ".":
			if step_buffer[2] != int(get_val(n,6,1), 16) or n == 0:
				flag_buffer[2] = True
				step_buffer[2] = int(get_val(n,6,1), 16)

		# Note CH4
		if get_val(n,20,3) != "...":
			if get_val(n,20,3) == "OFF": # Set volume to 0 to ensure a blank retrigger
				flag_buffer[7] = False
				flag_buffer[6] = True
				step_buffer[6] = 0
				CHon[1] = False
				CHOver[1] = True
			else:
				if n == 0:
					CHUsed[1] = True
					CHon[1] = True
				v = FUR_note_table.index(get_val(n,20,3))-11
				r = 0
				if not noise: # If noise long
					v = clamp(v, 0, len(NOI_lut_long))
					r = NOI_lut_long[v-1]
				else: # If noise short
					v = clamp(v, 0, len(NOI_lut_short))
					r = NOI_lut_short[v-1]
				if step_buffer[7] != r or n == 0:
					step_buffer[7] = r
					flag_buffer[7] = True

		# Vol CH4
		if get_val(n,26,1) != ".":
			if step_buffer[6] != int(get_val(n,26,1), 16) or n == 0:
				flag_buffer[6] = True
				step_buffer[6] = int(get_val(n,26,1), 16)

		# Parse effects
		for x in [7, 11, 15, 27, 31, 35]:
			fx = get_val(n, x, 2)
			fxpar = get_val(n, x + 2, 2)

			# FFxx - Stop song
			if fx == "FF":
				over = True

			# 08xx - change panning
			if fx == "08":
				c = 1
				if x > 15:
					c = 5
				flag_buffer[c] = True
				step_buffer[c] = int(fxpar,16)

			# 12xx - change CH2 duty
			if fx == "12":
				flag_buffer[3] = True
				step_buffer[3] = int(fxpar,16)

			# 11xx - change CH4 noise
			if fx == "11":
				noise = False
				if fxpar != "00":
					noise = True

			# 09xx - change speed 1
			if fx == "09":
				speed[0] = int(fxpar,16)

			# 0Fxx - change speed 1
			if fx == "0F":
				speed[1] = int(fxpar,16)

		# Apply per pair speed
		if step_buffer[0] != speed[n & 1] or n == 0:
			step_buffer[0] = speed[n & 1]
			flag_buffer[0] = True

		
		if n >= len(fur)-1:
			over = True

		if over:			
			valfx_buf[0] |= int(CHUsed[0]) << 5
			valfx_buf[0] |= int(CHUsed[1]) << 4
			break

		step = [0]

		# Set Speed
		if flag_buffer[0]:
			step[0] |= 0x40
			step.append(step_buffer[0]-1)
		# Set Duty
		if flag_buffer[3]:
			step[0] |= 0x20
			step.append(step_buffer[3] << 6)
		# Set Note
		if flag_buffer[4]:
			step[0] |= 0x10
			step.append(step_buffer[4] << 1)
		# Set Freq
		if flag_buffer[7]:
			step[0] |= 0x08
			step.append(step_buffer[7])
		# Set CH2 vol
		if flag_buffer[2]:
			step[0] |= 0x04
			step.append(step_buffer[2] << 4)
		# Set CH4 vol
		if flag_buffer[6]:
			step[0] |= 0x02
			step.append(step_buffer[6] << 4)
		# Set Panning
		if flag_buffer[1] or flag_buffer[5]:
			step[0] |= 0x01
			p = 0b01010101
			if CHUsed[0]:
				p |= (step_buffer[1] & 0x22)
			else:
				p |= 0x22
			if CHUsed[1]:
				p |= (step_buffer[5] & 0x88)
			else:
				p |= 0x88
			step.append(p)
		valfx_buf.append(step)

	valfx_buf.append(0x80)
	print(str(valfx_buf).replace("[","").replace("]",""))

if args.flist:
	flist = open(args.flist[0],"r")
	while 1:
		l = flist.readline()
		if "===" in l:
			n = l.split()[1]
			args.name = n
			stringb = ""
			args.sgb = []
			args.realspeed = 4

			# Get defines
			while 1:
				l = flist.readline()
				if l == "\n":
					break
				else: # Found define
					ar = l.split()

					if ar[0] == "SGB":
						args.sgb.append(ar[1])
						args.sgb.append(int(ar[2]))
						args.sgb.append(int(ar[3]))
						args.sgb.append(int(ar[4]))

					if ar[0] == "PRI":
						priority = int(ar[1])

					if ar[0] == "REALSPEED":
						args.realspeed = 1
			# Get string
			while 1:
				l = flist.readline()
				if l == "\n":
					break
				else: # Found sfx data
					stringb += l
			fur = stringb.split("\n")[2:]
			main()
		if l == "KILL":
			sys.exit()
main()
